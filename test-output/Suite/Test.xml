<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="15" hostname="Boopalan" failures="0" tests="14" name="Test" time="0.112" errors="0" timestamp="2024-09-05T11:14:11 IST">
  <testcase classname="utils.baseclass" name="@BeforeTest setUp" time="-1.725515051779E9">
    <failure type="org.testng.TestNGException" message="
Parameter &amp;apos;browser&amp;apos; is required by BeforeTest on method setUp but has not been marked @Optional or defined
in C:\Users\boopa\eclipse-workspace\Project1\testng.xml">
      <![CDATA[org.testng.TestNGException: 
Parameter 'browser' is required by BeforeTest on method setUp but has not been marked @Optional or defined
in C:\Users\boopa\eclipse-workspace\Project1\testng.xml
... Removed 21 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase classname="utils.baseclass" name="@BeforeTest urlVerify" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeTest urlVerify -->
  <testcase classname="tests.TC003_roundtrip" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC003_roundtrip" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC004_Payment" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC005_Validation" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC002_Oneway" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC002_Oneway" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC000_Signup" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC000_Signup" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC000_Signup" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC000_Signup" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC001_login" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC001_login" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC001_login" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="tests.TC001_login" name="@AfterMethod refreshAfterEachTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod refreshAfterEachTest -->
  <testcase classname="utils.baseclass" name="@AfterTest quit" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterTest quit -->
  <testcase classname="tests.TC003_roundtrip" name="negativeRoundTripBookingScenario" time="0.0">
    <skipped/>
  </testcase> <!-- negativeRoundTripBookingScenario -->
  <testcase classname="tests.TC003_roundtrip" name="positiveRoundTripBookingScenario" time="0.0">
    <skipped/>
  </testcase> <!-- positiveRoundTripBookingScenario -->
  <testcase classname="tests.TC004_Payment" name="testPaymentProcess" time="0.0">
    <skipped/>
  </testcase> <!-- testPaymentProcess -->
  <testcase classname="tests.TC005_Validation" name="validateBookingPage" time="0.0">
    <skipped/>
  </testcase> <!-- validateBookingPage -->
  <testcase classname="tests.TC002_Oneway" name="negativeOneWayBookingScenario" time="0.0">
    <skipped/>
  </testcase> <!-- negativeOneWayBookingScenario -->
  <testcase classname="tests.TC002_Oneway" name="positiveOneWayBookingScenario" time="0.0">
    <skipped/>
  </testcase> <!-- positiveOneWayBookingScenario -->
  <testcase classname="tests.TC000_Signup" name="positiveSignupScenario" time="0.001">
    <skipped/>
  </testcase> <!-- positiveSignupScenario -->
  <testcase classname="tests.TC000_Signup" name="invalidEmailSignupScenario" time="0.0">
    <skipped/>
  </testcase> <!-- invalidEmailSignupScenario -->
  <testcase classname="tests.TC000_Signup" name="mismatchedPasswordSignupScenario" time="0.0">
    <skipped/>
  </testcase> <!-- mismatchedPasswordSignupScenario -->
  <testcase classname="tests.TC000_Signup" name="emptyFieldsSignupScenario" time="0.0">
    <skipped/>
  </testcase> <!-- emptyFieldsSignupScenario -->
  <testcase classname="tests.TC001_login" name="positiveLoginScenario" time="0.0">
    <skipped/>
  </testcase> <!-- positiveLoginScenario -->
  <testcase classname="tests.TC001_login" name="invalidEmailLoginScenario" time="0.0">
    <skipped/>
  </testcase> <!-- invalidEmailLoginScenario -->
  <testcase classname="tests.TC001_login" name="invalidPasswordLoginScenario" time="0.0">
    <skipped/>
  </testcase> <!-- invalidPasswordLoginScenario -->
  <testcase classname="tests.TC001_login" name="emptyFieldsLoginScenario" time="0.0">
    <skipped/>
  </testcase> <!-- emptyFieldsLoginScenario -->
  <testcase classname="utils.baseclass" name="@BeforeTest setUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase classname="utils.baseclass" name="@BeforeTest setUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase classname="utils.baseclass" name="@AfterTest quit" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest quit -->
  <testcase classname="utils.baseclass" name="@BeforeTest urlVerify" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest urlVerify -->
  <testcase classname="utils.baseclass" name="@AfterTest quit" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest quit -->
  <testcase classname="utils.baseclass" name="@BeforeTest urlVerify" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest urlVerify -->
  <testcase classname="utils.baseclass" name="@AfterTest quit" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest quit -->
  <testcase classname="utils.baseclass" name="@AfterTest quit" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest quit -->
  <testcase classname="utils.baseclass" name="@AfterTest quit" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest quit -->
  <testcase classname="utils.baseclass" name="@BeforeTest urlVerify" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest urlVerify -->
  <testcase classname="utils.baseclass" name="@BeforeTest urlVerify" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest urlVerify -->
  <testcase classname="utils.baseclass" name="@BeforeTest setUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase classname="utils.baseclass" name="@BeforeTest setUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase classname="utils.baseclass" name="@BeforeTest setUp" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase classname="utils.baseclass" name="@BeforeTest urlVerify" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest urlVerify -->
</testsuite> <!-- Test -->
